[section Workarounds]

Egg provides some workaround utilities.

[import ../test/deduced_form.cpp]


[section pstade::result_of]

[heading Description]
`boost::result_of` has some problems especially under Boost1.34 or below:

* `boost::result_of` can't take a /const-qualified function pointer/ as the target function.
* Under msvc-7.1 or msvc-8.0 with Boost1.34 or below, `boost::result_of` can't take a /POD/ template as the target function. 

[note If you already use Boost1.35 and don't pass a /const-qualified function pointer/, you don't need this workaround.]

[note The former bug can probably be worked around by applying a patch to __BOOST_RESULT_OF__. ]

[heading Header]
* `<pstade/result_of.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`pstade::result_of`]
        [`boost::result_of` with some workaround.]
    ]
]

[endsect]




[section detect_result_type.hpp]

[heading Description]
`BOOST_MPL_HAS_XXX_TRAIT_DEF`, which __BOOST_RESULT_OF__ and __BOOST_LAMBDA__ depend on,
sometimes fails to work under the msvc compilers.
When you see a weird error message such that
"nested `sig` template is undefined" or "nested `result` template is undefined",
use this header.

[note This bug can probably be worked around by applying a patch to __BOOST_LAMBDA__ and __BOOST_RESULT_OF__. ]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`#include <pstade/detect_result_type.hpp>`]
        [A msvc workaround for `BOOST_MPL_HAS_XXX_TRAIT_DEF`]
    ]
]

[heading Preconditions]
* `<pstade/detect_result_type.hpp>` must be included before any Boost headers.

[endsect]




[section deduced_form]

[heading Description]
Under GCC 3.4.x, when you overload `call` in __LITTLE_FUNCTION__ with the same arity, the following workaround is needed.

[heading Header]
* `<pstade/egg/deduced_form.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`deduced_form`]
        [A type]
    ]
]

[heading Example]
[code_deduced_form_example]

[note You can also use __BOOST_ENABLE_IF__ instead. ]

[heading See also]
* __EGG_FUNCTION__
* __EGG_FUNCTION_FACADE__

[endsect]




[section DEFER]

[heading Description]
Under msvc-8.0, `boost::mpl::apply<PlaceholderExpression,..>` randomly fails
at the instantiation process in `boost::result_of`.
So that, `deferred` that depends on `boost::mpl::apply` needs a workaround.

[heading Header]
* `<pstade/egg/deferred.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`PSTADE_EGG_DEFER((Lam))`]
        [`deferred<Lam>::type` with some workaround.]
    ]
    [
        [`PSTADE_EGG_DEFER_BY((Lam), _Stg)`]
        [`deferred<Lam, _Stg>::type` with some workaround.]
    ]
]

[heading Preconditions]
* This macro is placed in non-deduced context, meaning that you can't add `typename` to this macro.
* The corresponding semantics is a valid expression.

[heading See also]
* __EGG_DEFERRED__

[endsect]




[section CONST]

[heading Description]
When you define a __FUNCTION_OBJECT__ in namespace scope,
GCC might show unused variable warnings without this macro.

[note Strictly speaking, a /const-qualified/ object in namespace scope incurs ODR(One Definition Rule) violation.
      Though a conforming workaround is found, even GCC can't do the right thing around /address constant expression/.
      Anyway, it is unlikely for this violation to cause significant problem. ]

[heading Header]
* `<pstade/egg/const.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`PSTADE_EGG_CONST((F), obj) = init;`]
        [`F const obj = init;`]
    ]
]

[heading Preconditions]
* `F` is a /POD/ type which is not /cv-qualified/.
* This macro is placed in namespace scope.
* The corresponding semantics is a valid expression.

[heading Example]
    PSTADE_EGG_CONST((T_foo), foo) = &foo_impl;

[heading See also]
* ...

[endsect]




[endsect]
