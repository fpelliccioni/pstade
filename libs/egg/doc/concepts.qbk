[section Concepts]

[import ../example/concepts.cpp]




[section Lexically Typed Object]

[heading Description]
A __LEXICALLY_TYPED_OBJECT__ is a named lvalue whose type is referable by using prefix `T_`.

[heading Refinement of]
* ...

[heading Requirements]
For any __LEXICALLY_TYPED_OBJECT__ `x` the following must be met:

* `x` is a named lvalue.
* If token `x` doesn't begin with a single underscore, `T_++x` is `_typeof(x)`; `TT++x` otherwise.

[heading Example]
[code_concepts_lexically_typed_object]

[heading Models]
* ...

[heading See also]
* __STATIC_FUNCTION_OBJECT__

[endsect]




[section Pipable Function Object]

[heading Description]
A __PIPABLE_FUNCTION_OBJECT__ is a __FUNCTION_OBJECT__ which behaves as if it were a "pipe" using `operator|` and `operator|=`.

[heading Refinement of]
* __FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __PIPABLE_FUNCTION_OBJECT__ `p` the following must be met:

* `x|p(x1,...,xN)` is a valid expresion if and only if `p(x1,...,xN)|=x` is a valid expression.
* `x|p(x1,...,xN)` and `p(x1,...,xN)|=x` have the same effects.
* If `N` is `0`, then `x|p()`, `x|p`, `p|=x`, and `p()|=x` are valid expressions which have the same effects.
* `operator|` works with left-to-right associativity.
* `operator|=` works with right-to-left associativity.

[heading Example]
[code_concepts_pipable_function_object]

[heading Models]
* ...

[heading See also]
* __EXTENSION_METHOD__
* __EGG_PIPABLE__
* __AMBI_FUNCTION_OBJECT__

[endsect]




[section Ambi Function Object]

[heading Description]
An __AMBI_FUNCTION_OBJECT__ is a __PIPABLE_FUNCTION_OBJECT__ which can be used also as free function.

[heading Refinement of]
* __PIPABLE_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __AMBI_FUNCTION_OBJECT__ `i` the following must be met:

* `x|i(x1,...,xN)` is a valid expression if and only if `i(x, x1,...,xN)` is a valid expression.
* `x|i(x1,...,xN)` and `i(x, x1,...,xN)` have the same effects.

[note A __PIPABLE_FUNCTION_OBJECT__ can be overloaded with different arities, whereas __AMBI_FUNCTION_OBJECT__ cannot.]

[heading Example]
[code_concepts_ambi_function_object]

[heading Models]
* ...

[heading See also]
* __EGG_AMBI__
* __PIPABLE_FUNCTION_OBJECT__

[endsect]




[section Major Function Object]

[heading Description]
A __MAJOR_FUNCTION_OBJECT__ is a __POLYMORPHIC_FUNCTION_OBJECT__ which can be used with __BOOST_LAMBDA__.
Egg is a library which helps you define your own __MAJOR_FUNCTION_OBJECT__.

[heading Refinement of]
* __POLYMORPHIC_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __MAJOR_FUNCTION_OBJECT__ `f` the following must be met:

* `f` can be used as the first argument of `boost::lambda::bind`.

[heading Example]
...

[heading Models]
* ...

[heading See also]
* __BOOST_LAMBDA__
* __BOOST_RESULT_OF__

[endsect]




[section Static Function Object]

[heading Description]
A __STATIC_FUNCTION_OBJECT__ is a __MAJOR_FUNCTION_OBJECT__ which is intended to replace normal functions.

[heading Refinement of]
* __LEXICALLY_TYPED_OBJECT__
* __MAJOR_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __STATIC_FUNCTION_OBJECT__ `f` the following must be met:

* `_typeof(f)` is a /POD/ type, and `f` is /statically initialized/.
* `boost::remove_reference<_decltype(f)>::type` is `_typeof(f) const`.
* If `boost::result_of<_typeof(f) const(a1,...,aN)>::type` is a valid expression,
  `boost::result_of<_typeof(f)(a1,...,aN)>::type` is a valid expression which is the same type.

[heading Example]
[code_concepts_static_function_object]

[heading Models]
* ...

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[section Little Function]

[heading Description]
A __LITTLE_FUNCTION__ type is a type which __EGG_FUNCTION_BUILDERS__ require.

[heading Refinement of]
* ...

[heading Requirements]
For any __LITTLE_FUNCTION__ type `L` the following must be met:

* `L` has a nested class template named `apply`, where `apply<...>::type` means return type of function calls.
* `L` has a const /member function/ named `call` whose return type is explicitly specified by the first template parameter.

[heading Example]
[code_concepts_little_function]

[heading Models]
* ...

[heading See also]
* __EGG_FUNCTION_BUILDERS__
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[import ../example/result_of_tutorial.cpp]

[section result_of tutorial]

[caution __BOOST_RESULT_OF__ document in boost.org is outdated.]

[heading How to call]

If you pass an lvalue argument, it must be a /reference type/; It can't be a /reference type/, otherwise:
[code_result_of_tutorial1]

Thanks to these two convention, you can easily write a "chain" of __BOOST_RESULT_OF__:
[code_result_of_tutorial2]

A /callable type/ can't be a /reference type/ but must be "const-correct",
meaning that you must add `const` to /const-qualified/ __FUNCTION_OBJECT__ type:
[code_result_of_tutorial3]

However, if a library guarantees the same behavior between /const-qualified/ type and
non-/const-qualified/ type (as __STATIC_FUNCTION_OBJECT__ does so), you could omit `const`:
[code_result_of_tutorial4]

[heading Bugs]

* msvc-7.1 and msvc-8.0 doesn't work with /POD/ templates.
* A /const-qualified/ function pointer doesn't work.

These bugs can be worked around by `pstade::result_of` in `<pstade/result_of.hpp>`.
The first bug is fixed with Boost1.35.

[heading See also]
* __PSTADE_RESULT_OF__

[endsect]




[endsect]
