[section Forwarding Strategies]


A Forwarding Strategy is a type which has two associated imaginary operators
`_arg_list` and `_meta_arg_list` which takes a token sequence and a strategy.
If the first argument of `arg_list` or `_meta_arg_list` is not a sequence,
assume it is "one element" sequence.
Egg components use `by_perfect` when you omit or specify `_default` for strategy parameter.

This section uses the following notation.

[table
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg(a)`]
        [`_typeof(a) const` if `a` is a rvalue; `boost::remove_reference<_decltype(a)>::type` otherwise.]
    ]
    [
        [`_ref(a)`]
        [`static_cast<_arg(a) &>(a)`]
    ]
    [
        [`_cref(a)`]
        [`static_cast<_arg(a) const &>(a)`]
    ]
    [
        [`_val(a)`]
        [`const_cast<V &>(static_cast<V const &>(boost::implicit_cast<V>(a)))`]
    ]
]
, where `V` is `boost::remove_cv<boost::decay<_typeof(a)>::type>::type`.

[note `_val(a)` copies `a` and turns it into mutable lvalue in order to work around __FORWARDING_PROBLEM__.
      You shouldn't take reference in __LITTLE_FUNCTION__ `call` with `by_value` strategy, unless writing generic one. ]


[import ../example/my_perfect.cpp]




[section by_perfect]

[heading Description]
Egg performs the "perfect forwarding" by default.

[heading Header]
* `<pstade/egg/by_perfect.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, by_perfect)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_perfect)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<B, by_perfect>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_ARITY`.
* `aI` is not a /function reference/.


[heading Example]
* `_meta_arg_list(a, by_perfect)` is `int,const int,int const` if `a` is `i,3,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_ref]

[heading Description]
`by_ref` offers a large arity, but can't take a non-const rvalue.

[heading Header]
* `<pstade/egg/by_ref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, by_ref)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_ref)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<B, by_ref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.
* `aI` is not a rvalue.

[heading Example]
* `_meta_arg_list(a, by_ref)` is `int,const int,int const` if `a` is `i,ci,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_cref]

[heading Description]
`by_cref` takes the arguments by /const reference/.

[heading Header]
* `<pstade/egg/by_cref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, by_cref)`]
        [`_cref(a1),...,_cref(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_cref)`]
        [`_typeof(a1) const,...,_typeof(aK) const`]
    ]
    [
        [`function<B, by_cref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `_meta_arg_list(a, by_cref)` is `int const,const int,int const` if `a` is `i,ci,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_value]

[heading Description]
`by_value` takes the arguments by value, which means that it can take a temporary "movable type" like `std::auto_ptr<>`.

[heading Header]
* `<pstade/egg/by_value.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, by_value)`]
        [`_val(a1),...,_val(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_value)`]
        [`_typeof(a1),...,_typeof(aK)`]
    ]
    [
        [`function<B, by_value>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `_meta_arg_list(a, by_value)` is `int,int,int` if `a` is `i,3,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section Deducing nullary return types]

[heading Description]
C++ instantiates the declarations of non-dependent member function templates, so that
some __EGG_FUNCTION_BUILDERS__ and __EGG_FUNCTION_ADAPTORS__ require a special workaround.
Here an imaginary operator is defined for the documentation.

[heading Valid expressions and semantics]
* `_deduce_r0(R0, expr)` is defined by the following:
    * If `R0` is `_default`, it is a valid expression and returns an unspecified type .
    * If `R0` is `use_nullary_result`,
        * If `_decltype(_epxr)` is a valid expression, it is a valid expression and returns `_decltype(expr)`.
        * Otherwise, it is not a valid expression.
    * Otherwise, `R0`.

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[/

[section PERFECT_STRATEGY]

[heading Description]
When you require a perfect forwarding strategy to support more arity than `PSTADE_EGG_MAX_ARITY`,
you can define your own forwarding strategy using `PSTADE_EGG_PERFECT_STRATEGY` macro.

[heading Header]
* `<pstade/egg/perfect_strategy.hpp>`

[heading Notation]
* `K` is any element of `AritySeq`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, Tag)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, Tag)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<B, Tag>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `Tag` is a type.
* `AritySeq` is a __BOOST_PREPROCESSOR__ sequence of numbers.
* `PSTADE_EGG_PERFECT_STRATEGY(Tag, AritySeq)` is placed in the global namespace.

[heading Example]
[code_my_perfect]

Now your strategy tag can be passed to `function<>` or __EGG_FUNCTION_ADAPTORS__:
[code_my_perfect_pipable]

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]

]




[endsect]
