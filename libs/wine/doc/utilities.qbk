[section Utilities]




[section clone_ptr]

[heading Description]

[heading Header]
* `<pstade/clone_ptr.hpp>`

[heading Model of]
* __ASSIGNABLE__
* __COPY_CONSTRUCTIBLE__
* __DEFAULT_CONSTRUCTIBLE__
* __OPTIONAL_POINTEE__
* __RESETTABLE__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`C c(p);`]
        [`c` owns `p`.]
    ]
]

[heading Preconditions]
* `T` is __CLONABLE__.
* `p` is a (possibly null) pointer.
* `_typeof(p)` is convertible to `T *`.

[heading Invariants]
* A copy of `clone_ptr<T>` makes a new object by using __CLONABLE__ concept.
* A copy-assignment of `clone_ptr<T>` offers strong exception guarantee.
* `swap` of `clone_ptr<T>` doesn't throw.

[heading Example]

[heading See also]
* ...

[endsect]




[section poly]

[heading Description]

[heading Header]
* `<pstade/poly.hpp>`

[heading Model of]
* __ASSIGNABLE__
* __COPY_CONSTRUCTIBLE__
* __DEFAULT_CONSTRUCTIBLE__
* __OPTIONAL_POINTEE__
* __RESETTABLE__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`poly<T>`]
        [`value_based< clone_ptr<T> >`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Invariants]
* A copy-assignment of `poly<T>` doesn't offer strong exception guarantee.
* `swap` of `poly<T>` doesn't offer strong exception guarantee.

[heading Example]

[heading See also]
* ...

[endsect]




[section value_based]

[heading Description]

[heading Header]
* `<pstade/value_based.hpp>`

[heading Model of]
* __ASSIGNABLE__
* __COPY_CONSTRUCTIBLE__
* __DEFAULT_CONSTRUCTIBLE__
* __OPTIONAL_POINTEE__
* __RESETTABLE__

[heading Notation]
* `V` is `boost::pointee<P>::type`.
* `v` is an object whose type is `V`.
* `m_p` is an "exposition-only" object whose type is `P`, which is held in `value_based<P>`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`value_based<P> x(v);`]
        [`m_p(new V(v))`]
    ]
]

[heading Preconditions]
* `P` is `boost::shared_ptr<...>` or `clone_ptr<...>`. 
* `V` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Invariants]
* A copy of `value_based<P>` makes a copy of `m_p`.
* The exception guarantee depends on `P`.

[heading Example]
...

[heading See also]
* ...

[endsect]



[endsect]
