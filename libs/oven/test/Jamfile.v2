# (C) Copyright 2007: Shunsuke Sogame
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

project
    : requirements
      <library>/boost/filesystem//boost_filesystem/<link>static
      <library>/boost/regex//boost_regex/<link>static
      <library>/boost/test//boost_test_exec_monitor/<link>static
      <library>/boost/test//boost_unit_test_framework/<link>static
      <library>/boost/thread//boost_thread/<link>static
      <toolset>gcc:<cxxflags>-ftemplate-depth-1024
      <toolset>intel:<debug-symbols>off
      <toolset>intel:<define>_SECURE_SCL=0
      <toolset>intel:<cxxflags>-wd279
      <threading>multi
    ;

test-suite "oven" :
    [ run adapted_to_base.cpp ]
    [ run adjacent_filtered.cpp ]
    [ run adjacent_transformed.cpp ]
    [ run advance_from.cpp ]
    [ run algorithm.cpp ]
    [ run always.cpp ]
    [ run any_fwd.cpp ]
    [ run any_indexed.cpp ]
    [ run any_output_iterator.cpp ]
    [ run any_range.cpp ]
    [ run any_range.cpp : : : <define>PSTADE_POLY_MIN_STORAGE_SIZE=1024 : any_range_local ]
    [ run any_range.cpp : : : <define>PSTADE_POLY_MIN_STORAGE_SIZE=2 : any_range_heap ]
    [ run applied.cpp ]
    [ run applier.cpp ]
    [ run array_range.cpp ]
    [ run as_array.cpp ]
    [ run as_c_str.cpp ]
    [ run as_literal.cpp ]
    [ run at.cpp ]
    [ run back.cpp ]
    [ run before_stable_partition.cpp ]
    [ run begin_end.cpp ]
    [ run block.cpp ]
#    [ run boost_range_iterator.cpp ]
#    [ run boost_range_iterator_const.cpp ]
#    [ run boost_range_iterator_nonconst.cpp ]
#    [ run boost_rbegin_rend.cpp ]
    [ run broken_into.cpp ]
    [ run checked.cpp ]
    [ run checked.cpp : : : <define>NDEBUG : checked_ndebug ]
    [ run checked_begin.cpp ]
    [ run checked_begin.cpp : : : <define>NDEBUG : checked_begin_ndebug ]
    [ run cleared.cpp ]
    [ run comprehension.cpp ]
    [ run concatenated.cpp ]
    [ run const_refs.cpp ]
    [ run constants.cpp ]
    [ compile-fail constants_fail.cpp ]
    [ run converted.cpp ]
    [ run converter.cpp ]
    [ run copied_to.cpp ]
    [ run copier.cpp ]
    [ run copy_range.cpp ]
    [ run counting.cpp ]
    [ run cycled.cpp ]
    [ run delimited.cpp ]
    [ run directory_range.cpp ]
    [ run do_iter_swap.cpp ]
    [ run dropped.cpp ]
    [ run dropped_while.cpp ]
    [ run eater.cpp ]
    [ run elements.cpp ]
    [ run empty_range.cpp ]
    [ run equals.cpp ]
    [ run exists.cpp ]
    [ run expression.cpp ]
    [ run expression.cpp : : : <define>BOOST_TYPEOF_EMULATION : expression_emulation ]
    [ run extension.cpp ]
    [ run extension.cpp : : : <define>PSTADE_OVEN_TEST_EXTENSION_NO_ORDER_DEPENDENCY : extension_no_order_dep ]
    [ run file_range.cpp ]
    [ run filtered.cpp ]
    [ run filterer.cpp ]
    [ run forall.cpp ]
    [ run foreach.cpp ]
    [ run foreach.cpp : : : <define>BOOST_TYPEOF_EMULATION : foreach_emulation ]
    [ run front.cpp ]
    [ run functions.cpp ]
#    [ run fuzipped.cpp ]
#    [ run fuzipped_mutable.cpp ]
    [ run generation.cpp ]
    [ run hetero.cpp ]
    [ run identities.cpp ]
    [ run indexing.cpp ]
    [ run indirected.cpp ]
    [ run indirecter.cpp ]
    [ run initial_ptrs.cpp ]
    [ run initial_values.cpp ]
    [ run intercepter.cpp ]
    [ run io.cpp ]
    [ run iter_range.cpp ]
    [ run iteration.cpp ]
    [ run jointed.cpp ]
    [ run lightweight_copyable.cpp ]
    [ run lines.cpp ]
    [ run make_range.cpp ]
    [ run map_keys.cpp ]
    [ run map_values.cpp ]
    [ run matches.cpp ]
    [ run matrix.cpp ]
    [ run mb_decoded.cpp ]
    [ run mb_encoded.cpp ]
    [ run memoized.cpp ]
    [ run merged.cpp ]
    [ run moved.cpp ]
    [ run msvc_foreach.cpp ]
    [ run offset.cpp ]
    [ run optional.cpp ]
    [ run outdirected.cpp ]
    [ run outplaced.cpp ]
    [ run pack.cpp ]
    [ run parallel_copy.cpp ]
    [ run parallel_equals.cpp ]
    [ run parallel_for_each.cpp ]
    [ run parallel_reduce.cpp ]
    [ run parallel_sort.cpp ]
    [ run partitioned.cpp ]
    [ run permuted.cpp ]
    [ run permuter.cpp ]
    [ run pointed.cpp ]
    [ run popped.cpp ]
    [ run pstade_oven.cpp ]
    [ run range_based.cpp ]
    [ run range_constantable.cpp ]
    [ run range_transformer.cpp ]
    [ run read.cpp ]
    [ run recursion.cpp ]
    [ run recursion.cpp : : : <define>PSTADE_POLY_MIN_STORAGE_SIZE=1024 : recursion_local ]
    [ run recursion.cpp : : : <define>PSTADE_POLY_MIN_STORAGE_SIZE=2 : recursion_heap ]
    [ run regex.cpp ]
    [ run regular.cpp ]
    [ run reversed.cpp ]
    [ run rotated.cpp ]
    [ run rvalues.cpp ]
    [ run scanned.cpp ]
    [ run set_cap.cpp ]
    [ run set_cup.cpp ]
    [ run set_delta.cpp ]
    [ run set_minus.cpp ]
    [ run shared.cpp ]
    [ run shared_values.cpp ]
    [ run single.cpp ]
    [ run sliced.cpp ]
    [ run sorted.cpp ]
    [ run spanned.cpp ]
    [ run split_at.cpp ]
    [ run steps.cpp ]
    [ run stream_lines.cpp ]
    [ run stream_read.cpp ]
    [ run stream_writer.cpp ]
    [ run string_found.cpp ]
    [ run string_split.cpp ]
    [ run sub_range.cpp ]
    [ run sub_set.cpp ]
    [ run successors.cpp ]
    [ run sugar.cpp ]
    [ run tab_expanded.cpp ]
    [ run tab_unexpanded.cpp ]
    [ run tagged.cpp ]
    [ run taken.cpp ]
    [ run taken_while.cpp ]
    [ run test_test.cpp ]
    [ run tokenized.cpp ]
    [ run transformed.cpp ]
    [ run transformer.cpp ]
    [ run traversal_tags.cpp ]
    [ run tuple.cpp ]
    [ run unfold.cpp ]
#    [ run unfuzipped.cpp ]
    [ run uniqued.cpp ]
    [ run unrolled_copy.cpp ]
    [ run unrolled_for_each.cpp ]
    [ run unrolled_reduce.cpp ]
    [ run unzipped.cpp ]
    [ run utf8.cpp ]
    [ run utf8_encoder.cpp ]
    [ run utf16.cpp ]
    [ run utf16_encoder.cpp ]
    [ run window.cpp ]
    [ run with_data.cpp ]
    [ run with_line_number.cpp ]
    [ run with_position.cpp ]
    [ run xpressive.cpp ]
    [ run xpressive_matches.cpp ]
    [ run xpressive_tokenized.cpp ]
    [ run xxx_chars.cpp ]
    [ run zipped.cpp ]
    [ run zipped_with.cpp ]
    [ link multiple_defs1.cpp multiple_defs2.cpp : : multiple_defs ]
    ;

