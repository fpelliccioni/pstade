[section Output Iterator Adaptors]

Output Iterator Adaptors adapt the behavior of the underlying _output_iterator_.
An Output Iterator Adaptor is a _pipable_fuction_object_, so that, by using `operator|=`, you can "chain" multiple adaptors:

    int const in[] = { 1,2,3,4,5,6,7,8,9,10 };
    int const answer[] = {2*3,4*3,6*3,8*3,10*3};
    std::vector<int> out;
    copy(in, filterer(regular(bll::_1 % 2 == 0))
        |= transformer(regular(bll::_1 * 3)) |= std::back_inserter(out) );
    BOOST_CHECK( equals(out, answer) );




[section converter]

[heading Description]
`converter` changes an output into specified type.

[heading Header]
* `<pstade/oven/converter.hpp>`

[heading Model of]
* ...

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> *_outit++ = boost::implicit_cast<To>(v)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_make_converter<To>`]
        [
            A _major_function_object_ type
        ]
    ]
    [
        [`X_make_converter<To>()(_outit)`]
        [
            `applier(f_)`
        ]
    ]
    [
        [`oven::make_converter<To>(_outit)`]
        [
            `X_make_converter<To>()(_outit)`
        ]
    ]
    [
        [`converter<To>`]
        [
            A _pipable_fuction_object_ type
        ]
    ]
    [
        [`converter<To>() |= _outit`]
        [
            `X_make_converter<To>()(_outit)`
        ]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]

[heading See also]
* _oven_applier_
* _oven_converted_
* _oven_transformer_

[endsect]




[section copier]

[heading Description]
`copier` outputs to another output iterator.

[heading Header]
* `<pstade/oven/copier.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> *_outit0++ = v; *_outit++ = v`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`copier(_outit0) |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
    std::vector<int> v1, v2, v3;
    int b[] = {1,3,4,5,3,2,5,1,2};

    copy(b,
        copier(std::back_inserter(v1)) |= copier(std::back_inserter(v2))
        |= std::back_inserter(v3) );
  
[heading See also]
* [@http://www.ddj.com/cpp/184401483 Common Knowledge: Output Iterator Adapters]
* _oven_applier_
* _oven_copied_to_

[endsect]




[section filterer]

[heading Description]
`filterer` skips an input which doesn't satify a predicate.

[heading Header]
* `<pstade/oven/filterer.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> if(_prd(*v)) *_outit++ = *v`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`filterer(_prd) |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* `_prd` is _assignable_.
* The corresponding semantics is a valid expression.

[heading Example]

[heading See also]
* _oven_applier_
* _oven_filtered_

[endsect]




[section indirecter]

[heading Description]
`indirecter` applies an extra dereference in outputting.

[heading Header]
* `<pstade/oven/indirecter.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> *_outit++ = *v`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`indirecter |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]

[heading See also]
* _oven_applier_
* _oven_indirected_
* _oven_outdirected_

[endsect]




[section intercepter]

[heading Description]
`intercepter` intercepts inputs.

[heading Header]
* `<pstade/oven/intercepter.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* 

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`intercepter(_outit2) |= _outit`]
        [
            `_outit2`
        ]
    ]
    [
        [`intercepter |= _outit`]
        [
            `eater`
        ]
    ]
]

[heading Preconditions]
* ...

[heading Example]

[heading See also]
* _oven_eater_

[endsect]




[section permuter]

[heading Description]
`permuter` outputs permuted values using inputs as indices of a range.

[heading Header]
* `<pstade/oven/permuter.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> *_outit++ = *(_begin(_rndrng)+v)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`permuter(_rndrng) |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]

[heading See also]
* _oven_applier_
* _oven_permuted_

[endsect]




[section transformer]

[heading Description]
`tranformer` applies a _function_object_ to an input.

[heading Header]
* `<pstade/oven/transformer.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> *_outit++ = _fun(v)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`transformer(_fun) |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* `_fun` is _assignable_.
* The corresponding semantics is a valid expression.

[heading Example]

[heading See also]
* _oven_applier_
* _oven_transformed_
* _oven_range_transformer_
* _oven_converter_

[endsect]




[section range_transformer]

[heading Description]
`range_transformer` can turn a Range Adaptor into Output Iterator Adaptor.

[heading Header]
* `<pstade/oven/range_transformer.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> _outit = copy(_fun(single(v)), _outit)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`range_transformer(_fun) |= _outit`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* `_fun` is _assignable_.
* The corresponding semantics is a valid expression.

[heading Example]
    file_range<boost::uint8_t> frng("utf8.txt");
    std::vector<boost::uint8_t> result;
    // Do the same job as utf8_encoder slightly inefficient way.
    copy(frng|utf8_decoded, range_transformer(make_utf8_encoded) |= std::back_inserter(result));

[heading See also]
* _oven_applier_
* _oven_applied_
* _oven_single_
* _oven_transformer_

[endsect]




[section utf8_encoder]

[heading Description]
Pending...

[heading Header]
* `<pstade/oven/utf8_encoder.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`utf8_encoder |= _outit`]
        [
            `T(_outit)`
        ]
    ]
]

[heading Preconditions]
* `T` is `boost::utf8_output_iterator<typeof(_outit)>` such that `T(_outit)` is a valid expression.

[heading Example]

[heading See also]
* _oven_utf8_decoded_

[endsect]




[section utf16_encoder]

[heading Description]
Pending...

[heading Header]
* `<pstade/oven/utf16_encoder.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`utf16_encoder |= _outit`]
        [
            `T(_outit)`
        ]
    ]
]

[heading Preconditions]
* `T` is `boost::utf16_output_iterator<typeof(_outit)>` such that `T(_outit)` is a valid expression.

[heading Example]

[heading See also]
* _oven_utf16_decoded_

[endsect]




[endsect]
